---
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
import * as classes from "./edit.astro.css";
---

<script>
  const templates = {
    output: document.getElementById("template-output"),
    code: document.getElementById("template-code"),
  };

  function cloneTemplate(template: Element | null) {
    if (!(template instanceof HTMLTemplateElement)) return null;

    return template.content.firstElementChild?.cloneNode(true);
  }

  function text(text: string) {
    return document.createTextNode(text);
  }
  function label(nodes: readonly Node[]) {
    const label = document.createElement("label");
    nodes.forEach((node) => label.appendChild(node));
    return label;
  }
  function output(nodes: readonly Node[]) {
    const output = cloneTemplate(templates.output);
    if (!(output instanceof HTMLOutputElement)) {
      throw new Error("Unexpected type");
    }

    nodes.forEach((node) => output.appendChild(node));
    return output;
  }
  function code(nodes: readonly Node[]) {
    const code = cloneTemplate(templates.code);
    if (!(code instanceof HTMLElement)) {
      throw new Error("Unexpected type");
    }

    nodes.forEach((node) => code.appendChild(node));
    return code;
  }

  const testers: readonly {
    id: string;
    label: () => readonly Node[];
    register: (output: HTMLOutputElement) => void;
  }[] = [
    {
      id: "foo",
      label: () => [text("Foo")],
      register: (output) => {
        const params = new URLSearchParams(location.search);
        output.textContent = params.getAll("foo").join(", ");
      },
    },
    {
      id: "bar",
      label: () => [text("Bar")],
      register: (output) => {
        const params = new URLSearchParams(location.search);
        output.textContent = params.getAll("bar").join(", ");
      },
    },
  ];

  const outputs = document.getElementById("outputs");

  if (outputs instanceof HTMLElement) {
    testers.forEach((tester) => {
      const out = output([]);
      outputs.appendChild(label([out, ...tester.label()]));
      tester.register(out);
    });
  }
</script>

<DefaultLayout title="Edit">
  <template id="template-output">
    <output class:list={classes.output}></output>
  </template>
  <template id="template-code">
    <code class:list={classes.code}></code>
  </template>

  <form action="/ground/form/preview" class:list={classes.root}>
    <fieldset id="outputs" class:list={classes.fieldset}>
      <legend>Output</legend>
    </fieldset>
  </form>
</DefaultLayout>
